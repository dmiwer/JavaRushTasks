taskKey="com.javarush.games.minesweeper.part07"\n\nИгра сапер (7/16)

На данном этапе мы займемся открытием ячеек. Давай создадим метод, отвечающий за это,
и переменную, которая будет хранить состояние ячейки (открыта или нет). При открытии ячейки метод будет:
- рисовать в ячейке мину, если там мина;
- отображать количество мин-соседей, если в ячейке нет мины;
- отмечать ячейку модели открытой;
- менять цвет ячейки.
Символ мины для удобства предлагаем вынести в отдельную переменную-константу. Когда ячейка должна открываться? Правильно,
при клике по ней левой кнопкой мыши. Для обработки такого нажатия существует специальный метод движка — onMouseLeftClick(int, int).
Давай переопределим его в нашем классе. Он будет вызывать метод открытия ячейки.
Ну и, конечно же, запусти программу и насладись результатом работы.


Требования:
1.	В классе MinesweeperGame должно существовать приватное статическое final поле String MINE, инициализированное при объявлении. Например, использовать можно UTF-16 символ мины &quot;\uD83D\uDCA3&quot;.
2.	В классе MinesweeperGame должен существовать приватный метод void openTile(int x, int y).
3.	Метод openTile(int, int) должен отрисовывать MINE, если gameObject по текущим координатам является миной. Используй метод setCellValue(int, int, String).
4.	Метод openTile(int, int) должен отрисовывать количество соседей-мин, если gameObject по текущим координатам не является миной. Используй метод setCellNumber(int, int, int).
5.	В классе GameObject должно существовать публичное поле isOpen типа boolean.
6.	В методе openTile(int, int) элементу матрицы gameField должно устанавливаться значение поля isOpen, равное true, и отрисовываться фон ячейки с помощью метода setCellColor(int, int, Color). Например, в Color.GREEN.
7.	В классе MinesweeperGame должен быть переопределен метод onMouseLeftClick(int, int) родительского класса Game.
8.	В методе onMouseLeftClick(int, int) должен быть вызван метод openTile(int, int).


Игра сапер (6/16)

Теперь давай займемся подсчетом мин в соседних ячейках. Для этого каждой ячейке матрицы добавим параметр
(поле класса), который отвечает за количество "заминированных" соседей. Для начала найдем всех соседей,
а потом посчитаем, сколько из них "заминированы". Для этого создадим метод getNeighbors,
возвращающий список всех соседних ячеек.
И, наконец, в отдельном методе мы посчитаем количество "заминированных" соседей для каждой ячейки gameField
и внесем это значение в соответствующее поле ячейки матрицы. Хотя визуально твоя работа не видна (ты же
запустил программу, чтобы посмотреть что получилось?), она очень важна для будущих шагов.




Игра сапер (5/16)

Игра "Сапер" не зря так называется. Игроку нужно будет иметь дело с минами, хотя лучше с ними дела не иметь :)
Давай введем в игру эти самые мины. Для этого в класс GameObject внесем изменения, которые учитывают,
что ячейка может быть миной — это флаг isMine.
Новый конструктор создавать не нужно: достаточно отредактировать существующий.
Кроме того, при создании ячеек матрицы добавь генерацию мин с вероятностью 10%. Самый простой способ это
сделать — использовать метод getRandomNumber(int n) класса Game, который возвращает случайное число от
0 до n-1 включительно. Следовательно, вероятность генерации определенного числа равна 1/n.
Также не забудь посчитать количество сгенерированных мин в классе MinesweeperGame.
Если все сделал, запусти программу и проверь, что ничего не поломалось :)



Игра сапер (4/16)

Состояние ячеек игрового поля нужно где-то хранить. Для этой задачи создадим матрицу (двумерный массив)
с размерами игрового поля. Чтобы увидеть состояние игры на экране, нам нужно
передать в отображение данные из матрицы. Отображение отвечает только за
визуальную информацию и смысловой нагрузки не несет.
В этом нам поможет метод
setCellColor(int, int, Color) класса Game, параметры которого — координаты и цвет ячейки. Давай
вызовем его и передадим координаты каждой ячейки матрицы и любой цвет (например,
Color.ORANGE). Предлагаем вынести отрисовку матрицы на отображении в отдельный метод createGame(),
который потом вызовем из метода initialize(). Запусти программу и посмотри, что получилось.

Подсказка: чтобы вызвать метод setCellColor(int, int, Color) для каждой ячейки матрицы,
воспользуйся циклами.



Игра сапер (3/16)

Так как в нашей игре будут использоваться игровые объекты (ячейки), создадим для их описания
отдельный класс GameObject. Давай подумаем, какие параметры должны быть у игрового объекта? Конечно же, это
координаты его размещения на игровом поле, x и y. Ну и куда же без конструктора? После того, как все сделаешь,
не забудь запустить программу и посмотреть на результат.



Игра сапер (2/16)

Наше игровое поле какое-то маленькое, тебе не кажется? Нам нужно игровое поле размером 9х9 ячеек.
Для указания размерности в движке существует метод setScreenSize(int, int), который принимает параметрами
ширину и высоту (количество ячеек по ширине и высоте). Поскольку поле квадратное, размерность
удобно вынести в отдельную приватную переменную-константу SIDE. Точкой входа в наш игровой движок
является метод initialize(). Поэтому переопредели его в классе MinesweeperGame, и в этом методе вызови метод
setScreenSize с аргументами SIDE и SIDE.
Обязательно проверь результат своей работы — запусти программу.



